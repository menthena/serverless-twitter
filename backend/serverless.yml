org: menthena
app: serverless-twitter-app
service:
  name: serverless-twitter-app

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-aws-documentation
  - serverless-reqvalidator-plugin

provider:
  name: aws
  runtime: nodejs10.x

  tracing:
    apiGateway: true
    lambda: true

  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}
  environment:
    TWEET_TABLE: twitter-v4-${self:provider.stage}
    DAILY_INDEX_NAME: daily-index-${self:provider.stage}
    IMAGE_S3_BUCKET: ahmet-serverless-twitter-${self:provider.stage}

functions:
  Auth:
    handler: src/lambda/auth/auth0Authorizer.handler

  GetDailyTweets:
    handler: src/lambda/http/getDailyTweets.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TWEET_TABLE}/index/${self:provider.environment.DAILY_INDEX_NAME}
    events:
      - http:
          method: get
          path: tweets
          cors: true
          authorizer: Auth

  NewTweet:
    handler: src/lambda/http/newTweet.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TWEET_TABLE}
    events:
      - http:
          method: post
          path: tweet
          cors: true
          authorizer: Auth
          requestValidatorName: RequestBodyValidator
          documentation:
            summary: New Tweet
            description: New Tweet
            requestModels:
              'application/json': NewTweetRequest

  UpdateTweet:
    handler: src/lambda/http/updateTweet.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TWEET_TABLE}
    events:
      - http:
          method: patch
          path: tweets/{tweetId}
          cors: true
          authorizer: Auth
          documentation:
            summary: Update Tweet
            description: Update Tweet
            requestModels:
              'application/json': UpdateTweetRequest

  DeleteTweet:
    handler: src/lambda/http/deleteTweet.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:DeleteItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TWEET_TABLE}
    events:
      - http:
          method: delete
          path: tweets/{tweetId}
          cors: true
          authorizer: Auth

  GenerateUploadUrl:
    handler: src/lambda/http/generateUploadUrl.handler
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.TWEET_TABLE}
      - Effect: Allow
        Action:
          - s3:PutObject
        Resource:
          - arn:aws:s3:::${self:provider.environment.IMAGE_S3_BUCKET}
          - arn:aws:s3:::${self:provider.environment.IMAGE_S3_BUCKET}/*
    events:
      - http:
          method: post
          path: tweets/{tweetId}/attachment
          cors: true
          authorizer: Auth

custom:
  documentation:
    api:
      info:
        version: v1.0.0
        title: Twitter API
        description: Serverless Twitter app
    models:
      - name: NewTweetRequest
        contentType: application/json
        schema: ${file(requests/NewTweetRequest.json)}
      - name: UpdateTweetRequest
        contentType: application/json
        schema: ${file(requests/UpdateTweetRequest.json)}

resources:
  Resources:
    RequestBodyValidator:
      Type: AWS::ApiGateway::RequestValidator
      Properties:
        RestApiId:
          Ref: ApiGatewayRestApi
        ValidateRequestBody: true
        ValidateRequestParameters: false
    tweetsTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: tweetId
            AttributeType: S
          - AttributeName: createdAt
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: tweetId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.TWEET_TABLE}
        GlobalSecondaryIndexes:
          - IndexName: ${self:provider.environment.DAILY_INDEX_NAME}
            KeySchema:
              - AttributeName: createdAt
                KeyType: HASH
              - AttributeName: tweetId
                KeyType: RANGE
            Projection:
              ProjectionType: ALL # What attributes will be copied to an index
    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.IMAGE_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            - AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: 'S3PolicyGet'
          Version: '2012-10-17'
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: arn:aws:s3:::${self:provider.environment.IMAGE_S3_BUCKET}/*
        Bucket: !Ref AttachmentsBucket
